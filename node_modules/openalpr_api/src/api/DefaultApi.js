/**
 * OpenALPR Cloud API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse200', 'model/InlineResponse400'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse200'), require('../model/InlineResponse400'));
  } else {
    // Browser globals (root is window)
    if (!root.OpenalprApi) {
      root.OpenalprApi = {};
    }
    root.OpenalprApi.DefaultApi = factory(root.OpenalprApi.ApiClient, root.OpenalprApi.InlineResponse200, root.OpenalprApi.InlineResponse400);
  }
}(this, function(ApiClient, InlineResponse200, InlineResponse400) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 2.0.1
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the recognizeBytes operation.
     * @callback module:api/DefaultApi~recognizeBytesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 
     * @param {String} imageBytes The image file that you wish to analyze encoded in base64 
     * @param {String} secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ 
     * @param {String} country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config 
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (default to 0)
     * @param {String} opts.state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (default to )
     * @param {Integer} opts.returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (default to 0)
     * @param {Integer} opts.topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (default to 10)
     * @param {String} opts.prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (default to )
     * @param {module:api/DefaultApi~recognizeBytesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.recognizeBytes = function(imageBytes, secretKey, country, opts, callback) {
      opts = opts || {};
      var postBody = imageBytes;

      // verify the required parameter 'imageBytes' is set
      if (imageBytes == undefined || imageBytes == null) {
        throw "Missing the required parameter 'imageBytes' when calling recognizeBytes";
      }

      // verify the required parameter 'secretKey' is set
      if (secretKey == undefined || secretKey == null) {
        throw "Missing the required parameter 'secretKey' when calling recognizeBytes";
      }

      // verify the required parameter 'country' is set
      if (country == undefined || country == null) {
        throw "Missing the required parameter 'country' when calling recognizeBytes";
      }


      var pathParams = {
      };
      var queryParams = {
        'secret_key': secretKey,
        'recognize_vehicle': opts['recognizeVehicle'],
        'country': country,
        'state': opts['state'],
        'return_image': opts['returnImage'],
        'topn': opts['topn'],
        'prewarp': opts['prewarp']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/recognize_bytes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the recognizeFile operation.
     * @callback module:api/DefaultApi~recognizeFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 
     * @param {File} image The image file that you wish to analyze 
     * @param {String} secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ 
     * @param {String} country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config 
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (default to 0)
     * @param {String} opts.state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (default to )
     * @param {Integer} opts.returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (default to 0)
     * @param {Integer} opts.topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (default to 10)
     * @param {String} opts.prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (default to )
     * @param {module:api/DefaultApi~recognizeFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.recognizeFile = function(image, secretKey, country, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'image' is set
      if (image == undefined || image == null) {
        throw "Missing the required parameter 'image' when calling recognizeFile";
      }

      // verify the required parameter 'secretKey' is set
      if (secretKey == undefined || secretKey == null) {
        throw "Missing the required parameter 'secretKey' when calling recognizeFile";
      }

      // verify the required parameter 'country' is set
      if (country == undefined || country == null) {
        throw "Missing the required parameter 'country' when calling recognizeFile";
      }


      var pathParams = {
      };
      var queryParams = {
        'secret_key': secretKey,
        'recognize_vehicle': opts['recognizeVehicle'],
        'country': country,
        'state': opts['state'],
        'return_image': opts['returnImage'],
        'topn': opts['topn'],
        'prewarp': opts['prewarp']
      };
      var headerParams = {
      };
      var formParams = {
        'image': image
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/recognize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the recognizeUrl operation.
     * @callback module:api/DefaultApi~recognizeUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 
     * @param {String} imageUrl A URL to an image that you wish to analyze 
     * @param {String} secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ 
     * @param {String} country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config 
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (default to 0)
     * @param {String} opts.state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (default to )
     * @param {Integer} opts.returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (default to 0)
     * @param {Integer} opts.topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (default to 10)
     * @param {String} opts.prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (default to )
     * @param {module:api/DefaultApi~recognizeUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.recognizeUrl = function(imageUrl, secretKey, country, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageUrl' is set
      if (imageUrl == undefined || imageUrl == null) {
        throw "Missing the required parameter 'imageUrl' when calling recognizeUrl";
      }

      // verify the required parameter 'secretKey' is set
      if (secretKey == undefined || secretKey == null) {
        throw "Missing the required parameter 'secretKey' when calling recognizeUrl";
      }

      // verify the required parameter 'country' is set
      if (country == undefined || country == null) {
        throw "Missing the required parameter 'country' when calling recognizeUrl";
      }


      var pathParams = {
      };
      var queryParams = {
        'image_url': imageUrl,
        'secret_key': secretKey,
        'recognize_vehicle': opts['recognizeVehicle'],
        'country': country,
        'state': opts['state'],
        'return_image': opts['returnImage'],
        'topn': opts['topn'],
        'prewarp': opts['prewarp']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/recognize_url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
