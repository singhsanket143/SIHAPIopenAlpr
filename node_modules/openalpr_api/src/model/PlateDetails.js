/**
 * OpenALPR Cloud API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Coordinate', 'model/PlateCandidate', 'model/RegionOfInterest', 'model/VehicleDetails'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Coordinate'), require('./PlateCandidate'), require('./RegionOfInterest'), require('./VehicleDetails'));
  } else {
    // Browser globals (root is window)
    if (!root.OpenalprApi) {
      root.OpenalprApi = {};
    }
    root.OpenalprApi.PlateDetails = factory(root.OpenalprApi.ApiClient, root.OpenalprApi.Coordinate, root.OpenalprApi.PlateCandidate, root.OpenalprApi.RegionOfInterest, root.OpenalprApi.VehicleDetails);
  }
}(this, function(ApiClient, Coordinate, PlateCandidate, RegionOfInterest, VehicleDetails) {
  'use strict';




  /**
   * The PlateDetails model module.
   * @module model/PlateDetails
   * @version 2.0.1
   */

  /**
   * Constructs a new <code>PlateDetails</code>.
   * @alias module:model/PlateDetails
   * @class
   */
  var exports = function() {
    var _this = this;












  };

  /**
   * Constructs a <code>PlateDetails</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PlateDetails} obj Optional instance to populate.
   * @return {module:model/PlateDetails} The populated <code>PlateDetails</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('plate')) {
        obj['plate'] = ApiClient.convertToType(data['plate'], 'String');
      }
      if (data.hasOwnProperty('matches_template')) {
        obj['matches_template'] = ApiClient.convertToType(data['matches_template'], 'Integer');
      }
      if (data.hasOwnProperty('requested_topn')) {
        obj['requested_topn'] = ApiClient.convertToType(data['requested_topn'], 'Integer');
      }
      if (data.hasOwnProperty('processing_time_ms')) {
        obj['processing_time_ms'] = ApiClient.convertToType(data['processing_time_ms'], 'Number');
      }
      if (data.hasOwnProperty('confidence')) {
        obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
      }
      if (data.hasOwnProperty('region')) {
        obj['region'] = ApiClient.convertToType(data['region'], 'String');
      }
      if (data.hasOwnProperty('region_confidence')) {
        obj['region_confidence'] = ApiClient.convertToType(data['region_confidence'], 'Number');
      }
      if (data.hasOwnProperty('coordinates')) {
        obj['coordinates'] = ApiClient.convertToType(data['coordinates'], [Coordinate]);
      }
      if (data.hasOwnProperty('candidates')) {
        obj['candidates'] = ApiClient.convertToType(data['candidates'], [PlateCandidate]);
      }
      if (data.hasOwnProperty('vehicle_region')) {
        obj['vehicle_region'] = RegionOfInterest.constructFromObject(data['vehicle_region']);
      }
      if (data.hasOwnProperty('vehicle')) {
        obj['vehicle'] = VehicleDetails.constructFromObject(data['vehicle']);
      }
    }
    return obj;
  }

  /**
   * Best plate number for this plate
   * @member {String} plate
   */
  exports.prototype['plate'] = undefined;
  /**
   * Indicates whether the plate matched a regional text pattern
   * @member {Integer} matches_template
   */
  exports.prototype['matches_template'] = undefined;
  /**
   * The max number of results requested
   * @member {Integer} requested_topn
   */
  exports.prototype['requested_topn'] = undefined;
  /**
   * Number of milliseconds to process the license plate
   * @member {Number} processing_time_ms
   */
  exports.prototype['processing_time_ms'] = undefined;
  /**
   * Confidence percentage that the plate number is correct
   * @member {Number} confidence
   */
  exports.prototype['confidence'] = undefined;
  /**
   * Specified or detected region (e.g., tx for Texas)
   * @member {String} region
   */
  exports.prototype['region'] = undefined;
  /**
   * Confidence percentage that the plate region is correct
   * @member {Number} region_confidence
   */
  exports.prototype['region_confidence'] = undefined;
  /**
   * The X/Y coordinates of the license plate in the image Four coordinates are provided that form a polygon starting from the top-left and moving clockwise ending in the bottom left 
   * @member {Array.<module:model/Coordinate>} coordinates
   */
  exports.prototype['coordinates'] = undefined;
  /**
   * All the top N candidates that could be the correct plate number
   * @member {Array.<module:model/PlateCandidate>} candidates
   */
  exports.prototype['candidates'] = undefined;
  /**
   * @member {module:model/RegionOfInterest} vehicle_region
   */
  exports.prototype['vehicle_region'] = undefined;
  /**
   * @member {module:model/VehicleDetails} vehicle
   */
  exports.prototype['vehicle'] = undefined;



  return exports;
}));


